name: deliver

on: [push, pull_request] # TODO: Only development and version tags

jobs:
  deliver:
    env:
      DOCKER_TAG: github-actions

    runs-on: ubuntu-latest
    steps:
    - name: Get startup date
      id: datetime
      run: echo "::set-output name=year_week::$(date -u +'%Y-%U')"

    - name: Git checkout
      uses: actions/checkout@v2

    - name: Set up Docker images cache
      id: docker_cache
      uses: actions/cache@v2
      with:
        path: .github/.docker-cache
        key: ${{ runner.os }}-docker-${{ steps.datetime.outputs.year_week }}-${{ hashFiles('**/package-lock.json', '**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-docker-${{ steps.datetime.outputs.year_week }}

    - name: Load Docker cache (if cache was hit)
      if: steps.docker_cache.outputs.cache-hit == 'true'
      run: docker load -i .github/.docker-cache/images.tar

    - name: Build the Docker image
      run: docker build . -t sfgrp/taxonworks --build-arg REVISION=$(echo $GITHUB_SHA | cut -c1-9) --build-arg BUNDLER_WORKERS=3

    - name: Run image tests
      run: .github/docker-tests/test.sh

    - name: Wait build workflow to complete successfully
      uses: actions/github-script@v3
      with:
        script: |
          const buildRunId = (await github.actions.listWorkflowRunsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo
          }).data.workflow_runs.find((wr) => {
            return wr.name === 'build' && wr.head_sha === context.sha
          }).id

          const oneMinute = () => {
            return new Promise(resolve => {
              setTimeout(() => resolve(true), 60000)
            }
          }

          let run, attempts = 15
          do {
            run = github.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: buildRunId
            }).data
          } while(attempts-- && run.status !== 'completed' && await oneMinute())

          if (run.conclusion !== 'success') {
            core.setFailed(`Build workflow did not complete successfully. [status = '${run.status}'; conclusion = '${run.conclusion}]'`);
          }

    - name: Login to DockerHub
      if: ${{ github.event_name != 'pull_request' }}
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push image to DockerHub
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        docker tag sfgrp/taxonworks:latest sfgrp/taxonworks:$DOCKER_TAG
        docker push sfgrp/taxonworks:$DOCKER_TAG

    - name: Save Docker cache (if cache was NOT hit)
      if: steps.docker_cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p .github/.docker-cache
        docker save -o .github/.docker-cache/images.tar $(docker history -q sfgrp/taxonworks | grep -v '^<missing>')
